@use 'sass:math';
@use 'sass:color';
@use 'sass:meta'; // Re-add meta module
@use 'variables'; // Import variables explicitly

// Helper for rem conversion
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  } @else if meta.type-of($number) != 'number' {
     @error "Value #{$number} passed to strip-unit() is not a number.";
  }
  @return $number;
}

@function rem($pixels) {
  $pixel-value: strip-unit($pixels);
  $base-font-value: strip-unit(variables.$base-font-size);

  @if $pixel-value == null or $base-font-value == null {
      @error "Could not strip units for rem() calculation.";
  }
  
  @return math.div($pixel-value, $base-font-value) * 1rem;
}

// Helper mixin for form control styles
@mixin form-control-base {
  // Use variables from the 'variables' module
  display: block;
  width: 100%;
  padding: rem(8) rem(12);
  font-size: rem(14); 
  font-weight: 400;
  line-height: 1.5;
  color: variables.$text-color;
  background-clip: padding-box;
  border: 1px solid variables.$border-color;
  border-radius: variables.$border-radius;
  transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
  box-shadow: none; 

  &:focus {
    border-color: color.adjust(variables.$primary-color, $lightness: 25%);
    outline: 0;
    box-shadow: variables.$focus-shadow;
  }

  &::placeholder {
    color: variables.$secondary-text-color;
    opacity: 1;
  }

  &:disabled {
    background-color: variables.$background-color;
    cursor: not-allowed;
    opacity: 0.7;
    box-shadow: none;
  }
}

// Placeholder for common focus ring style
%focus-shadow-ring {
  outline: 0;
  // Use the variable from the 'variables' module
  box-shadow: variables.$focus-shadow;
} 