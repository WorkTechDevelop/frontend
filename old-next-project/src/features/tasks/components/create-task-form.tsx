"use client";

import { z } from "zod";
import { cn } from "@/lib/utils";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { ProjectAvatar } from "@/features/projects/components/project-avatar";

import { Input } from "@/components/ui/form/input";
import { Button } from "@/components/ui/controls/button";
import { Textarea } from "@/components/ui/form/textarea";
import { DottedSeparator } from "@/components/feedback/dotted-separator";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/layout/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/form/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form/form";

import { createTaskSchema } from "../schemas";
import { useCreateTask } from "../api/use-create-task";

interface CreateTaskFormProps {
  onCancel?: () => void;
  projectOptions: { id: string; name: string; imageUrl?: string }[];
  memberOptions: { id: string; name: string }[];
}

export const CreateTaskForm = ({
  onCancel,
  projectOptions,
}: CreateTaskFormProps) => {
  const { mutate, isPending } = useCreateTask();

  const form = useForm<z.infer<typeof createTaskSchema>>({
    resolver: zodResolver(createTaskSchema),
    defaultValues: {
      title: "",
      description: "",
      priority: "MEDIUM",
      projectId: "",
      taskType: "TASK",
      assignee: "",
      estimation: 0,
    },
  });

  const onSubmit = (values: z.infer<typeof createTaskSchema>) => {
    mutate(values, {
      onSuccess: () => {
        form.reset();
        onCancel?.();
      },
    });
  };

  return (
    <Card className="w-full h-full border-none shadow-none">
      <CardHeader className="flex p-7">
        <CardTitle className="text-xl font-bold">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</CardTitle>
      </CardHeader>
      <div className="px-7">
        <DottedSeparator />
      </div>
      <CardContent className="p-7">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <div className="flex flex-col gap-y-4">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" autoComplete="off" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–û–ø–∏—Å–∞–Ω–∏–µ</FormLabel>
                    <FormControl>
                      <Textarea 
                        {...field} 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                        rows={4}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="projectId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–ü—Ä–æ–µ–∫—Ç *</FormLabel>
                    <Select
                      defaultValue={field.value}
                      onValueChange={field.onChange}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç" />
                        </SelectTrigger>
                      </FormControl>
                      <FormMessage />
                      <SelectContent>
                        {projectOptions.map((project) => (
                          <SelectItem key={project.id} value={project.id}>
                            <div className="flex items-center gap-x-2">
                              <ProjectAvatar
                                className="size-6"
                                name={project.name}
                              />
                              {project.name}
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="assignee"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å *</FormLabel>
                    <FormControl>
                      <Input 
                        {...field} 
                        placeholder="ID –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        autoComplete="email"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="priority"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</FormLabel>
                      <Select
                        defaultValue={field.value}
                        onValueChange={field.onChange}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" />
                          </SelectTrigger>
                        </FormControl>
                        <FormMessage />
                        <SelectContent>
                          <SelectItem value="BLOCKER">üî¥ –ë–ª–æ–∫–µ—Ä</SelectItem>
                          <SelectItem value="HIGH">üü† –í—ã—Å–æ–∫–∏–π</SelectItem>
                          <SelectItem value="MEDIUM">üü° –°—Ä–µ–¥–Ω–∏–π</SelectItem>
                          <SelectItem value="LOW">üü¢ –ù–∏–∑–∫–∏–π</SelectItem>
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="taskType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–¢–∏–ø –∑–∞–¥–∞—á–∏</FormLabel>
                      <Select
                        defaultValue={field.value}
                        onValueChange={field.onChange}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
                          </SelectTrigger>
                        </FormControl>
                        <FormMessage />
                        <SelectContent>
                          <SelectItem value="BUG">üêõ –ë–∞–≥</SelectItem>
                          <SelectItem value="TASK">üìã –ó–∞–¥–∞—á–∞</SelectItem>
                          <SelectItem value="RESEARCH">üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</SelectItem>
                          <SelectItem value="STORY">üìñ –ò—Å—Ç–æ—Ä–∏—è</SelectItem>
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="estimation"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–û—Ü–µ–Ω–∫–∞ (—á–∞—Å—ã)</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="number"
                        min="0"
                        max="999"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤ —á–∞—Å–∞—Ö"
                        onChange={(e) => field.onChange(Number(e.target.value))}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <DottedSeparator className="py-7" />
            
            <div className="flex items-center justify-between">
              <Button
                type="button"
                size="lg"
                variant="secondary"
                onClick={onCancel}
                disabled={isPending}
                className={cn(!onCancel && "invisible")}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>

              <Button type="submit" size="lg" disabled={isPending}>
                –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};
